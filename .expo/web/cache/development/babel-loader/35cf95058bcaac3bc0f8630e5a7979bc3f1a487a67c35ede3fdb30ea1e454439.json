{"ast":null,"code":"import React from 'react';\nimport createElement from \"react-native-web/dist/exports/createElement\";\nimport { prepare } from './utils/prepare';\nimport { convertInt32ColorToRGBA } from './utils/convertInt32Color';\nimport { camelCaseToDashed, hasTouchableProperty, remeasure } from './utils';\nimport SvgTouchableMixin from '../lib/SvgTouchableMixin';\nexport class WebShape extends React.Component {\n  prepareProps(props) {\n    return props;\n  }\n  elementRef = React.createRef();\n  lastMergedProps = {};\n  setNativeProps(props) {\n    const merged = Object.assign({}, this.props, this.lastMergedProps, props.style);\n    this.lastMergedProps = merged;\n    const clean = prepare(this, this.prepareProps(merged));\n    const current = this.elementRef.current;\n    if (current) {\n      for (const cleanAttribute of Object.keys(clean)) {\n        const cleanValue = clean[cleanAttribute];\n        switch (cleanAttribute) {\n          case 'ref':\n          case 'children':\n            break;\n          case 'style':\n            for (const partialStyle of [].concat(clean.style ?? [])) {\n              Object.assign(current.style, partialStyle);\n            }\n            break;\n          case 'fill':\n            if (cleanValue && typeof cleanValue === 'object') {\n              const value = cleanValue;\n              current.setAttribute('fill', convertInt32ColorToRGBA(value.payload));\n            }\n            break;\n          case 'stroke':\n            if (cleanValue && typeof cleanValue === 'object') {\n              const value = cleanValue;\n              current.setAttribute('stroke', convertInt32ColorToRGBA(value.payload));\n            }\n            break;\n          default:\n            current.setAttribute(camelCaseToDashed(cleanAttribute), cleanValue);\n            break;\n        }\n      }\n    }\n  }\n  constructor(props) {\n    super(props);\n    if (hasTouchableProperty(props)) {\n      SvgTouchableMixin(this);\n    }\n    this._remeasureMetricsOnActivation = remeasure.bind(this);\n  }\n  render() {\n    if (!this.tag) {\n      throw new Error('When extending `WebShape` you need to overwrite either `tag` or `render`!');\n    }\n    this.lastMergedProps = {};\n    return createElement(this.tag, prepare(this, this.prepareProps(this.props)));\n  }\n}","map":{"version":3,"names":["React","createElement","prepare","convertInt32ColorToRGBA","camelCaseToDashed","hasTouchableProperty","remeasure","SvgTouchableMixin","WebShape","Component","prepareProps","props","elementRef","createRef","lastMergedProps","setNativeProps","merged","Object","assign","style","clean","current","cleanAttribute","keys","cleanValue","partialStyle","concat","value","setAttribute","payload","constructor","_remeasureMetricsOnActivation","bind","render","tag","Error"],"sources":["C:\\StockMarketApp2\\node_modules\\react-native-svg\\src\\web\\WebShape.ts"],"sourcesContent":["import React from 'react';\nimport {\n  GestureResponderEvent,\n  // @ts-ignore it is not seen in exports\n  unstable_createElement as createElement,\n} from 'react-native';\n\nimport { BaseProps } from './types';\nimport { prepare } from './utils/prepare';\nimport { convertInt32ColorToRGBA } from './utils/convertInt32Color';\nimport { camelCaseToDashed, hasTouchableProperty, remeasure } from './utils';\nimport SvgTouchableMixin from '../lib/SvgTouchableMixin';\n\nexport class WebShape<\n  P extends BaseProps = BaseProps,\n> extends React.Component<P> {\n  [x: string]: unknown;\n  protected tag?: React.ElementType;\n  protected prepareProps(props: P) {\n    return props;\n  }\n\n  elementRef =\n    React.createRef<SVGElement>() as React.MutableRefObject<SVGElement | null>;\n\n  lastMergedProps: Partial<P> = {};\n\n  /**\n   * disclaimer: I am not sure why the props are wrapped in a `style` attribute here, but that's how reanimated calls it\n   */\n  setNativeProps(props: { style: P }) {\n    const merged = Object.assign(\n      {},\n      this.props,\n      this.lastMergedProps,\n      props.style\n    );\n    this.lastMergedProps = merged;\n    const clean = prepare(this, this.prepareProps(merged));\n    const current = this.elementRef.current;\n    if (current) {\n      for (const cleanAttribute of Object.keys(clean)) {\n        const cleanValue = clean[cleanAttribute as keyof typeof clean];\n        switch (cleanAttribute) {\n          case 'ref':\n          case 'children':\n            break;\n          case 'style':\n            // style can be an object here or an array, so we convert it to an array and assign each element\n            for (const partialStyle of ([] as unknown[]).concat(\n              clean.style ?? []\n            )) {\n              Object.assign(current.style, partialStyle);\n            }\n            break;\n          case 'fill':\n            if (cleanValue && typeof cleanValue === 'object') {\n              const value = cleanValue as { payload: number };\n              current.setAttribute(\n                'fill',\n                convertInt32ColorToRGBA(value.payload)\n              );\n            }\n            break;\n          case 'stroke':\n            if (cleanValue && typeof cleanValue === 'object') {\n              const value = cleanValue as { payload: number };\n              current.setAttribute(\n                'stroke',\n                convertInt32ColorToRGBA(value.payload)\n              );\n            }\n            break;\n          default:\n            // apply all other incoming prop updates as attributes on the node\n            // same logic as in https://github.com/software-mansion/react-native-reanimated/blob/d04720c82f5941532991b235787285d36d717247/src/reanimated2/js-reanimated/index.ts#L38-L39\n            // @ts-expect-error TODO: fix this\n            current.setAttribute(camelCaseToDashed(cleanAttribute), cleanValue);\n            break;\n        }\n      }\n    }\n  }\n\n  _remeasureMetricsOnActivation: () => void;\n  touchableHandleStartShouldSetResponder?: (\n    e: GestureResponderEvent\n  ) => boolean;\n\n  touchableHandleResponderMove?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderGrant?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderRelease?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderTerminate?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderTerminationRequest?: (\n    e: GestureResponderEvent\n  ) => boolean;\n\n  constructor(props: P) {\n    super(props);\n\n    // Do not attach touchable mixin handlers if SVG element doesn't have a touchable prop\n    if (hasTouchableProperty(props)) {\n      SvgTouchableMixin(this);\n    }\n\n    this._remeasureMetricsOnActivation = remeasure.bind(this);\n  }\n\n  render(): JSX.Element {\n    if (!this.tag) {\n      throw new Error(\n        'When extending `WebShape` you need to overwrite either `tag` or `render`!'\n      );\n    }\n    this.lastMergedProps = {};\n    return createElement(\n      this.tag,\n      prepare(this, this.prepareProps(this.props))\n    );\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,OAAAC,aAAA;AAQzB,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,iBAAiB,EAAEC,oBAAoB,EAAEC,SAAS,QAAQ,SAAS;AAC5E,OAAOC,iBAAiB,MAAM,0BAA0B;AAExD,OAAO,MAAMC,QAAQ,SAEXR,KAAK,CAACS,SAAS,CAAI;EAGjBC,YAAYA,CAACC,KAAQ,EAAE;IAC/B,OAAOA,KAAK;EACd;EAEAC,UAAU,GACRZ,KAAK,CAACa,SAAS,CAAa,CAAC;EAE/BC,eAAe,GAAe,CAAC,CAAC;EAKhCC,cAAcA,CAACJ,KAAmB,EAAE;IAClC,MAAMK,MAAM,GAAGC,MAAM,CAACC,MAAM,CAC1B,CAAC,CAAC,EACF,IAAI,CAACP,KAAK,EACV,IAAI,CAACG,eAAe,EACpBH,KAAK,CAACQ,KACR,CAAC;IACD,IAAI,CAACL,eAAe,GAAGE,MAAM;IAC7B,MAAMI,KAAK,GAAGlB,OAAO,CAAC,IAAI,EAAE,IAAI,CAACQ,YAAY,CAACM,MAAM,CAAC,CAAC;IACtD,MAAMK,OAAO,GAAG,IAAI,CAACT,UAAU,CAACS,OAAO;IACvC,IAAIA,OAAO,EAAE;MACX,KAAK,MAAMC,cAAc,IAAIL,MAAM,CAACM,IAAI,CAACH,KAAK,CAAC,EAAE;QAC/C,MAAMI,UAAU,GAAGJ,KAAK,CAACE,cAAc,CAAuB;QAC9D,QAAQA,cAAc;UACpB,KAAK,KAAK;UACV,KAAK,UAAU;YACb;UACF,KAAK,OAAO;YAEV,KAAK,MAAMG,YAAY,IAAK,EAAE,CAAeC,MAAM,CACjDN,KAAK,CAACD,KAAK,IAAI,EACjB,CAAC,EAAE;cACDF,MAAM,CAACC,MAAM,CAACG,OAAO,CAACF,KAAK,EAAEM,YAAY,CAAC;YAC5C;YACA;UACF,KAAK,MAAM;YACT,IAAID,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;cAChD,MAAMG,KAAK,GAAGH,UAAiC;cAC/CH,OAAO,CAACO,YAAY,CAClB,MAAM,EACNzB,uBAAuB,CAACwB,KAAK,CAACE,OAAO,CACvC,CAAC;YACH;YACA;UACF,KAAK,QAAQ;YACX,IAAIL,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;cAChD,MAAMG,KAAK,GAAGH,UAAiC;cAC/CH,OAAO,CAACO,YAAY,CAClB,QAAQ,EACRzB,uBAAuB,CAACwB,KAAK,CAACE,OAAO,CACvC,CAAC;YACH;YACA;UACF;YAIER,OAAO,CAACO,YAAY,CAACxB,iBAAiB,CAACkB,cAAc,CAAC,EAAEE,UAAU,CAAC;YACnE;QACJ;MACF;IACF;EACF;EAeAM,WAAWA,CAACnB,KAAQ,EAAE;IACpB,KAAK,CAACA,KAAK,CAAC;IAGZ,IAAIN,oBAAoB,CAACM,KAAK,CAAC,EAAE;MAC/BJ,iBAAiB,CAAC,IAAI,CAAC;IACzB;IAEA,IAAI,CAACwB,6BAA6B,GAAGzB,SAAS,CAAC0B,IAAI,CAAC,IAAI,CAAC;EAC3D;EAEAC,MAAMA,CAAA,EAAgB;IACpB,IAAI,CAAC,IAAI,CAACC,GAAG,EAAE;MACb,MAAM,IAAIC,KAAK,CACb,2EACF,CAAC;IACH;IACA,IAAI,CAACrB,eAAe,GAAG,CAAC,CAAC;IACzB,OAAOb,aAAa,CAClB,IAAI,CAACiC,GAAG,EACRhC,OAAO,CAAC,IAAI,EAAE,IAAI,CAACQ,YAAY,CAAC,IAAI,CAACC,KAAK,CAAC,CAC7C,CAAC;EACH;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}