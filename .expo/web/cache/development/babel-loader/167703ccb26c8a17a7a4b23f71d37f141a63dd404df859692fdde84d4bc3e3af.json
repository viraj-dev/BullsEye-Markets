{"ast":null,"code":"import PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport { getAssetByID } from '@react-native/assets-registry/registry';\nconst svgDataUriPattern = /^(data:image\\/svg\\+xml;utf8,)(.*)/;\nexport function resolveAssetUri(source) {\n  let src = {};\n  if (typeof source === 'number') {\n    const asset = getAssetByID(source);\n    if (asset == null) {\n      throw new Error(`Image: asset with ID \"${source}\" could not be found. Please check the image source or packager.`);\n    }\n    src = {\n      width: asset.width,\n      height: asset.height,\n      scale: asset.scales[0]\n    };\n    if (asset.scales.length > 1) {\n      const preferredScale = PixelRatio.get();\n      src.scale = asset.scales.reduce((prev, curr) => Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale) ? curr : prev);\n    }\n    const scaleSuffix = src.scale !== 1 ? `@${src.scale}x` : '';\n    src.uri = asset ? `${asset.httpServerLocation}/${asset.name}${scaleSuffix}.${asset.type}` : '';\n  } else if (typeof source === 'string') {\n    src.uri = source;\n  } else if (source && !Array.isArray(source) && typeof source.uri === 'string') {\n    src.uri = source.uri;\n  }\n  if (src.uri) {\n    var _src;\n    const match = (_src = src) === null || _src === void 0 || (_src = _src.uri) === null || _src === void 0 ? void 0 : _src.match(svgDataUriPattern);\n    if (match) {\n      const [, prefix, svg] = match;\n      const encodedSvg = encodeURIComponent(svg);\n      src.uri = `${prefix}${encodedSvg}`;\n      return src;\n    }\n  }\n  return src;\n}","map":{"version":3,"names":["getAssetByID","svgDataUriPattern","resolveAssetUri","source","src","asset","Error","width","height","scale","scales","length","preferredScale","PixelRatio","get","reduce","prev","curr","Math","abs","scaleSuffix","uri","httpServerLocation","name","type","Array","isArray","_src","match","prefix","svg","encodedSvg","encodeURIComponent"],"sources":["C:\\StockMarketApp2\\node_modules\\react-native-svg\\src\\lib\\resolveAssetUri.ts"],"sourcesContent":["import {\n  ImageResolvedAssetSource,\n  PixelRatio,\n  type ImageProps as RNImageProps,\n} from 'react-native';\n// @ts-expect-error react-native/assets-registry doesn't export types.\nimport { getAssetByID } from '@react-native/assets-registry/registry';\n\nexport type PackagerAsset = {\n  __packager_asset: boolean;\n  fileSystemLocation: string;\n  httpServerLocation: string;\n  width?: number;\n  height?: number;\n  scales: Array<number>;\n  hash: string;\n  name: string;\n  type: string;\n};\n\nconst svgDataUriPattern = /^(data:image\\/svg\\+xml;utf8,)(.*)/;\n\n// Based on that function: https://github.com/necolas/react-native-web/blob/54c14d64dabd175e8055e1dc92e9196c821f9b7d/packages/react-native-web/src/exports/Image/index.js#L118-L156\nexport function resolveAssetUri(\n  source?: RNImageProps['source'] | string | number\n): Partial<ImageResolvedAssetSource> | null {\n  let src: Partial<ImageResolvedAssetSource> = {};\n  if (typeof source === 'number') {\n    // get the URI from the packager\n    const asset: PackagerAsset | null = getAssetByID(source);\n    if (asset == null) {\n      throw new Error(\n        `Image: asset with ID \"${source}\" could not be found. Please check the image source or packager.`\n      );\n    }\n    src = {\n      width: asset.width,\n      height: asset.height,\n      scale: asset.scales[0],\n    };\n    if (asset.scales.length > 1) {\n      const preferredScale = PixelRatio.get();\n      // Get the scale which is closest to the preferred scale\n      src.scale = asset.scales.reduce((prev, curr) =>\n        Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale)\n          ? curr\n          : prev\n      );\n    }\n    const scaleSuffix = src.scale !== 1 ? `@${src.scale}x` : '';\n    src.uri = asset\n      ? `${asset.httpServerLocation}/${asset.name}${scaleSuffix}.${asset.type}`\n      : '';\n  } else if (typeof source === 'string') {\n    src.uri = source;\n  } else if (\n    source &&\n    !Array.isArray(source) &&\n    typeof source.uri === 'string'\n  ) {\n    src.uri = source.uri;\n  }\n\n  if (src.uri) {\n    const match = src?.uri?.match(svgDataUriPattern);\n    // inline SVG markup may contain characters (e.g., #, \") that need to be escaped\n    if (match) {\n      const [, prefix, svg] = match;\n      const encodedSvg = encodeURIComponent(svg);\n      src.uri = `${prefix}${encodedSvg}`;\n      return src;\n    }\n  }\n  return src;\n}\n"],"mappings":";AAMA,SAASA,YAAY,QAAQ,wCAAwC;AAcrE,MAAMC,iBAAiB,GAAG,mCAAmC;AAG7D,OAAO,SAASC,eAAeA,CAC7BC,MAAiD,EACP;EAC1C,IAAIC,GAAsC,GAAG,CAAC,CAAC;EAC/C,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IAE9B,MAAME,KAA2B,GAAGL,YAAY,CAACG,MAAM,CAAC;IACxD,IAAIE,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM,IAAIC,KAAK,CACb,yBAAyBH,MAAM,kEACjC,CAAC;IACH;IACAC,GAAG,GAAG;MACJG,KAAK,EAAEF,KAAK,CAACE,KAAK;MAClBC,MAAM,EAAEH,KAAK,CAACG,MAAM;MACpBC,KAAK,EAAEJ,KAAK,CAACK,MAAM,CAAC,CAAC;IACvB,CAAC;IACD,IAAIL,KAAK,CAACK,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MAC3B,MAAMC,cAAc,GAAGC,UAAU,CAACC,GAAG,CAAC,CAAC;MAEvCV,GAAG,CAACK,KAAK,GAAGJ,KAAK,CAACK,MAAM,CAACK,MAAM,CAAC,CAACC,IAAI,EAAEC,IAAI,KACzCC,IAAI,CAACC,GAAG,CAACF,IAAI,GAAGL,cAAc,CAAC,GAAGM,IAAI,CAACC,GAAG,CAACH,IAAI,GAAGJ,cAAc,CAAC,GAC7DK,IAAI,GACJD,IACN,CAAC;IACH;IACA,MAAMI,WAAW,GAAGhB,GAAG,CAACK,KAAK,KAAK,CAAC,GAAG,IAAIL,GAAG,CAACK,KAAK,GAAG,GAAG,EAAE;IAC3DL,GAAG,CAACiB,GAAG,GAAGhB,KAAK,GACX,GAAGA,KAAK,CAACiB,kBAAkB,IAAIjB,KAAK,CAACkB,IAAI,GAAGH,WAAW,IAAIf,KAAK,CAACmB,IAAI,EAAE,GACvE,EAAE;EACR,CAAC,MAAM,IAAI,OAAOrB,MAAM,KAAK,QAAQ,EAAE;IACrCC,GAAG,CAACiB,GAAG,GAAGlB,MAAM;EAClB,CAAC,MAAM,IACLA,MAAM,IACN,CAACsB,KAAK,CAACC,OAAO,CAACvB,MAAM,CAAC,IACtB,OAAOA,MAAM,CAACkB,GAAG,KAAK,QAAQ,EAC9B;IACAjB,GAAG,CAACiB,GAAG,GAAGlB,MAAM,CAACkB,GAAG;EACtB;EAEA,IAAIjB,GAAG,CAACiB,GAAG,EAAE;IAAA,IAAAM,IAAA;IACX,MAAMC,KAAK,IAAAD,IAAA,GAAGvB,GAAG,cAAAuB,IAAA,gBAAAA,IAAA,GAAHA,IAAA,CAAKN,GAAG,cAAAM,IAAA,uBAARA,IAAA,CAAUC,KAAK,CAAC3B,iBAAiB,CAAC;IAEhD,IAAI2B,KAAK,EAAE;MACT,MAAM,GAAGC,MAAM,EAAEC,GAAG,CAAC,GAAGF,KAAK;MAC7B,MAAMG,UAAU,GAAGC,kBAAkB,CAACF,GAAG,CAAC;MAC1C1B,GAAG,CAACiB,GAAG,GAAG,GAAGQ,MAAM,GAAGE,UAAU,EAAE;MAClC,OAAO3B,GAAG;IACZ;EACF;EACA,OAAOA,GAAG;AACZ","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}